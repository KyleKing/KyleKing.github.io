// Generated by CoffeeScript 1.7.1
var Metalsmith, Timestamp, URL, Util, buildAtomFromCollections, generateId, setup;

Metalsmith = require('metalsmith');

Timestamp = require('internet-timestamp');

URL = require('url');

Util = require('util');

buildAtomFromCollections = function(opts, metalsmith, atom) {
  var buffer, date, entry, meta, targetCollection, targetCollectionName, url, _i, _j, _len, _len1, _ref;
  url = opts.url;
  meta = metalsmith.metadata();
  date = meta.date;
  buffer = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n\n  <title>" + atom.title + "</title>\n  <id>" + url + "/</id>\n  <link href=\"" + url + "/" + atom.atomFile + "\" rel=\"self\" />\n  <updated>" + (Timestamp(date)) + "</updated>";
  _ref = atom.collections;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    targetCollectionName = _ref[_i];
    targetCollection = meta.collections[targetCollectionName];
    for (_j = 0, _len1 = targetCollection.length; _j < _len1; _j++) {
      entry = targetCollection[_j];
      if (entry.author == null) {
        entry.author = {};
      }
      if (entry.author_name == null) {
        entry.author_name = "Anonymous";
      }
      if (entry.author_email == null) {
        entry.author_email = "anonymous@example.com";
      }
      if (entry.date == null) {
        entry.date = new Date(0);
      }
      buffer = buffer + ("<entry>\n    <title>" + entry.title + "</title>\n    <id>" + (generateId(url, entry)) + "</id>\n    <link href=\"" + url + "/" + entry.path + "\" />\n    <updated>" + (Timestamp(entry.date)) + "</updated>\n    <author>\n      <name>" + entry.author_name + "</name>\n      <email>" + entry.author_email + "</email>\n    </author>\n    <summary>" + entry.excerpt + "</summary>\n </entry>");
    }
  }
  buffer = buffer + "</feed>";
  return buffer;
};

generateId = function(url, entry) {
  var d, dateString, error, id, monthString, parsedUrl;
  try {
    parsedUrl = URL.parse(url);
    d = entry.date;
    dateString = String('00' + d.getDate()).slice(-2);
    monthString = String('00' + d.getMonth()).slice(-2);
    return id = "tag:" + parsedUrl.host + "," + (d.getFullYear()) + "-" + monthString + "-" + dateString + ":/" + entry.path;
  } catch (_error) {
    error = _error;
    return console.log("Error generating ID from : " + url + " and " + (Util.inspect(entry)));
  }
};

setup = function(opts, collections) {
  return function(files, metalsmith, done) {
    var atom, buffer, error, file, key;
    try {
      for (key in collections) {
        atom = collections[key];
        buffer = buildAtomFromCollections(opts, metalsmith, atom);
        file = {
          contents: buffer,
          mode: "0644"
        };
        files[atom.atomFile] = file;
      }
    } catch (_error) {
      error = _error;
      console.log("Error building atom file : " + error);
    }
    return done();
  };
};

module.exports = setup;
