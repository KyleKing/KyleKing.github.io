extends ../layout.jade

block title
	h1.cd.hidden-xs PiAlarm
	h1.cd.hidden-sm.hidden-md.hidden-lg PiAlarm

block Slide_In_Panel_Content
	.summary.cd
		h4.cd Summary
		p.cd I wasn't happy with the alarm clock I had or the ones I found online, so I built an alarm clock to fit all the features I could dream up. I wanted to have no option but to wake up, bright lights, loud noises, and tons of smart features. For example, the alarm can be accessed via a web app and when I leave my apartment the alarm is dormant until I return. This way if I leave before my alarm, it won't go off and wake anyone else up.
		a(href="https://github.com/KyleKing/PiAlarm").unstyled.poster-container
			button.poster
				i.fa.fa-file-pdf-o.fa-1x
				| &nbsp;Github repository

	h4.cd Wake up call
	p.cd While still very much in progress, the alarm clock wakes me up every morning. I'm a heavy sleeper, so I designed the alarm clock around a cycle that goes from pleasant to effective. When the alarm starts, an RGB LED strip is activated that gently increases in brightness. The second stage adds a quiet buzzer and increase the LED strips brightness. The third stage initiates the bed shaker, buzzer, and fades the RGB LED strip at full brightness. At any point, I can press the off button to turn it all off.

	figure.figure
		img(src=path + "imgs/PiAlarm/Overview.jpg").small-cd
		figcaption.figure-caption.text-left The breadboarded LED Strip, buzzer, bed shaker driver, and display

	h5.cd Web App
	p.cd I built a simple interface using react that displays the alarms and editable content. The alarms can be toggled on/off, deleted, given a title, or the cron scheduled can be updated. The app uses socket.io on the back-end to control the alarm clock in real time and a complicated Cron-scheduler to keep all the alarms running.

	figure.figure
		img(src=path + "imgs/PiAlarm/Webapp.png").small-cd
		figcaption.figure-caption.text-left The web app user interface

	h5.cd Geo-location Smarts
	p.cd Using IFTTT, I made a recipe that sends a web request whenever I leave my apartment and whenever I return. To make sure the alarm clock is always working, there is a bright red LED to display when the alarm clock is dormant, in case something goes wrong.
	//- p.cd Using If This Then That (IFTTT), I setup a recipe that makes a web request when I'm away to turn off the alarm and when I return to activate the alarm. This way, the alarm won't run unless I'm present.

	//- h5.cd Display
	//- p.cd The current display is a simple character LCD that I had lying around. I'm working on replacing it with a 4 custom RGB LED digits. I'm using shift registers to control the insane number of pins necessary to set each LED individually. I'll update the progress on the new display sometime soon.

	//- 	li Display updates, such as temperature, wind speed, and likelihood of rain, which is useful when I head out in the morning to bike commute to work (to be built)

	h4.cd Next Steps and Future Features
	p.cd As ongoing project, the alarm clock doesn't yet have a shell and has only a temporary display. In the long run, I'm working on a complicated RGB 7-segment display that will have 1 RGB LED per segment. So to show all four numbers and the two dots, there will be 30 RGB LEDs and 90 analog pins. To control the LEDs individually, I'm setting up a series of shift registers driven by the shift PWM library and an Arduino that is instructed by the core Raspberry Pi. I will also display the weather predicted for when I bike commute to help me pack for the day. Along with the new features, I still need to make electronic updates to compress the circuit, reduce external power supplies, and secure the circuits down to perfboards.
